package messages.errors.scope;

import ast.AST;
import messages.errors.Error;
import utilities.PrettyPrint;

/**
 * An {@link Error} that is generated by the {@link namechecker.NameChecker} and {@link typechecker.TypeChecker}.
 * @author Daniel Levy
 */
public class ScopeError extends Error {

    /**
     * Stores the original {@link AST} declaration for any construct that is redeclared.
     */
    protected AST originalDeclaration;

    /**
     * {@inheritDoc}
     * @param fileName The file in which the error is generated for (if applicable).
     */
    @Override
    public void createMessage(String fileName) {
        msg = buildMessageHeader(fileName) + buildLocationInfo() + buildMainMessage() + buildRedeclarationMessage();
    }

    private String buildRedeclarationMessage() {
        if(originalDeclaration == null)
            return "";

        StringBuilder sb = new StringBuilder();

        return sb.toString();
    }


//    public String createRedeclarationMsg() {
//        StringBuilder sb = new StringBuilder();
//
//        if(originalDeclaration != null) {
//            AST compilationUnit = originalDeclaration.getCompilationUnit();
//            if(!interpretMode || compilationUnit.isCompilation()) {
//                sb.append("\n\nIn ")
//                  .append(compilationUnit.asCompilation().getFile())
//                  .append(": ")
//                  .append(PrettyPrint.RED)
//                  .append("Redeclaration was found.");
//            } else {
//                sb.append(PrettyPrint.RED)
//                  .append("\n\nRedeclaration was found.");
//            }
//
//            sb.append(PrettyPrint.RESET)
//              .append("\n")
//              .append(originalDeclaration.header());
//        }
//        return sb.toString();
//    }
//
//    private String getRedeclName() {
//        if(originalDeclaration.isTopLevelDecl())
//            return originalDeclaration.toString();
//        else if(originalDeclaration.isFieldDecl() || originalDeclaration.isMethodDecl())
//            return originalDeclaration.toString();
//        else if(originalDeclaration.isStatement() && originalDeclaration.asStatement().isLocalDecl())
//            return originalDeclaration.toString();
//        else if(originalDeclaration.isParamDecl())
//            return originalDeclaration.asParamDecl().toString();
//        else if(originalDeclaration.isTypeifier())
//            return originalDeclaration.toString();
//        else
//            throw new RuntimeException("An invalid AST node was saved as a redeclaration.");
//    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String buildMessageHeader(String fileName) {
        return super.buildMessageHeader(fileName)
                + PrettyPrint.YELLOW
                + "Scope Error "
                + messageNumber()
                + "\n\n"
                + PrettyPrint.RESET;
    }

    /**
     * {@inheritDoc}
     */
    public ScopeError asScopeError() { return this; }
}
