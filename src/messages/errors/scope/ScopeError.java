package messages.errors.scope;

import ast.AST;
import ast.misc.CompilationUnit;
import messages.errors.Error;
import utilities.PrettyPrint;

/**
 * An {@link Error} that is generated by the {@link namechecker.NameChecker} and {@link typechecker.TypeChecker}.
 * @author Daniel Levy
 */
public class ScopeError extends Error {

    /**
     * Stores the original {@link AST} declaration for any construct that is redeclared.
     */
    protected AST originalDeclaration;

    /**
     * {@inheritDoc}
     * @param fileName The file in which the error is generated for (if applicable).
     */
    @Override
    public void createMessage(String fileName) {
        msg = buildMessageHeader(fileName) + buildLocationInfo() + buildMainMessage() + buildRedeclarationMessage();
    }

    /**
     * Builds a message that is displayed any time a user tries to redeclare an existing variable, function, or type.
     * @return String that prints the location of {@link #originalDeclaration} if the user writes a redeclaration.
     */
    private String buildRedeclarationMessage() {
        if(originalDeclaration == null)
            return "";

        StringBuilder sb = new StringBuilder();
        CompilationUnit root = originalDeclaration.getCompilationUnit();

        if(root != null)
            sb.append(super.buildMessageHeader(root.toString()));
        else
            sb.append("\n\n");

        sb.append(PrettyPrint.RED)
          .append("Redeclaration was found.")
          .append(PrettyPrint.RESET)
          .append("\n")
          .append(originalDeclaration.header());

        return sb.toString();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String buildMessageHeader(String fileName) {
        return super.buildMessageHeader(fileName)
                + PrettyPrint.YELLOW
                + "Scope Error "
                + messageNumber()
                + "\n\n"
                + PrettyPrint.RESET;
    }

    /**
     * Checks if the current {@link ScopeError} was generated as a result of a redeclaration.
     * @return {@code True} if the {@link #originalDeclaration} was set to denote a redeclaration occurred,
     * {@code False} otherwise.
     */
    public boolean isRedeclarationError() { return originalDeclaration != null; }

    /**
     * {@inheritDoc}
     */
    public boolean isScopeError() { return true; }

    /**
     * {@inheritDoc}
     */
    public ScopeError asScopeError() { return this; }
}
