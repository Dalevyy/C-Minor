package messages;

import messages.errors.ErrorBuilder;
import messages.errors.mod.ModErrorBuilder;
import messages.errors.runtime.RuntimeErrorBuilder;
import messages.errors.scope.ScopeErrorBuilder;
import messages.errors.semantic.SemanticErrorBuilder;
import messages.errors.syntax.SyntaxErrorBuilder;
import messages.errors.type.TypeErrorBuilder;
import utilities.Vector;

/**
 * A class designed to handle all messages generated by the compiler.
 * <p>
 *     This class primarily serves as a way for us to easily generate and store messages
 *     during the compilation process. There are a series of helper methods that will generate
 *     an appropriate {@link ErrorBuilder} when we are inside of a {@link utilities.Visitor}, and
 *     every message that is generated will be stored within this class. This allows us to print
 *     multiple messages to the user if there are multiple issues found with their program.
 * </p>
 * @author Daniel levy
 */
public class MessageHandler {

    /**
     * The current file we will be generating messages for.
     */
    private final String fileName;

    /**
     * List of messages that the current {@link MessageHandler} has generated.
     */
    private final Vector<Message> messages;

    /**
     * Flag that will be set by {@link interpreter.VM} when executing the interpreter.
     */
    private static boolean inInterpretationMode = false;

    /**
     * Default constructor for {@link MessageHandler}. This will be called in interpretation mode.
     */
    public MessageHandler() { this(""); }

    /**
     * Main constructor for {@link MessageHandler}.
     * @param fileName The file that this handler will create messages for.
     */
    public MessageHandler(String fileName) {
        this.fileName = fileName;
        this.messages = new Vector<>();
    }

    public void storeMessage(Message msg) {
        msg.createMessage(fileName);

        if(inInterpretationMode) {
            System.out.println(msg.msg);
            throw new RuntimeException("This is a temporary error message.");
        }
        else
            messages.add(msg);
    }

    /**
     * Sets every {@link MessageHandler} object to work under interpretation mode.
     */
    public static void setInterpretationMode() { inInterpretationMode = true; }

    /**
     * Generates a {@link ModErrorBuilder}.
     * @return {@link ModErrorBuilder}
     */
    public ModErrorBuilder createModErrorBuilder() { return new ModErrorBuilder(this); }

    /**
     * Generates a {@link RuntimeErrorBuilder}.
     * @return {@link RuntimeErrorBuilder}
     */
    public ErrorBuilder createRuntimeErrorBuilder() { return new RuntimeErrorBuilder(this); }

    /**
     * Generates a {@link ScopeErrorBuilder}.
     * @return {@link ScopeErrorBuilder}
     */
    public ErrorBuilder createScopeErrorBuilder() { return new ScopeErrorBuilder(this); }

    /**
     * Generates a {@link SemanticErrorBuilder}.
     * @return {@link ScopeErrorBuilder}
     */
    public ErrorBuilder createSemanticErrorBuilder() { return new SemanticErrorBuilder(this); }

    /**
     * Generates a {@link SyntaxErrorBuilder}.
     * @return {@link SyntaxErrorBuilder}
     */
    public ErrorBuilder createSyntaxErrorBuilder() { return new SyntaxErrorBuilder(this); }

    /**
     * Generates a {@link TypeErrorBuilder}.
     * @return {@link TypeErrorBuilder}
     */
    public ErrorBuilder createTypeErrorBuilder() { return new TypeErrorBuilder(this); }
}
