#################################  List of C Minor Errors and Suggestions #################################

#  SYNTAX ERRORS
SYNTAX_ERROR_100 = Multi-line comment never terminates.
SYNTAX_ERROR_101 = An input statement can not be contained in an output statement.

#  SCOPE ERRORS
SCOPE_ERROR_300 = Local variable '<arg0>' can not be redeclared in the current scope.
SCOPE_ERROR_301 = Local variable '<arg0>' can not be initialized using itself.
SCOPE_ERROR_302 = Global variable '<arg0>' can not be redeclared in the current scope.
SCOPE_ERROR_303 = Global variable '<arg0>' can not be initialized using itself.
SCOPE_ERROR_304 = '<arg0>' has not been declared, and it can not be used.
SCOPE_ERROR_305 = Parameter '<arg0>' shares a name with a top level declaration, and it can not be used.
SCOPE_ERROR_306 = Function '<arg0>' can not be redeclared with the given parameter types since it was declared earlier. 
SCOPE_ERROR_307 = Class '<arg0>' can not be redeclared since it was declared earlier.
SCOPE_ERROR_308 = Class '<arg0>' can not inherit from itself.
SCOPE_ERROR_309 = Class '<arg0>' can not inherit from class '<arg1>' since it was not declared.
SCOPE_ERROR_310 = Field '<arg0>' in class '<arg1>' can not be declared since it redeclares '<arg0>'.
SCOPE_ERROR_311 = Method '<arg0>' redefines the same method found in class '<arg1>', so it must be marked as overridden.
SCOPE_ERROR_312 = Method '<arg0>' does not redefine any method, and it should not be marked as overridden.
SCOPE_ERROR_313 = Method '<arg0>' in class '<arg1>' can not be redeclared with the given parameter types since it was declared earlier.
SCOPE_ERROR_314 = Class '<arg0>' can not be instantiated since it does not exist.
SCOPE_ERROR_315 = Field '<arg0>' can not be initialized since it was not declared in class '<arg1>'.
SCOPE_ERROR_316 = Field '<arg0>' was already initialized, and it can not be initialized twice for class '<arg1>'.
SCOPE_ERROR_318 = The 'parent' keyword was used outside of a class.
SCOPE_ERROR_319 = The 'parent' keyword was used in class '<arg0>' which does not inherit any class.
SCOPE_ERROR_320 = '<arg0>' already represents a type, so it can not be used as a name.
SCOPE_ERROR_321 = Enum '<arg0>' can not be declared since it redeclares '<arg0>'.
SCOPE_ERROR_322 = Constant '<arg0>' from enum '<arg1>' can not be used since it was already declared elsewhere.
SCOPE_ERROR_323 = '<arg0>' does not represent a class and can not be used with the binary operation '<arg1>'.
SCOPE_ERROR_324 = Field '<arg0>' in class '<arg1>' can not be declared since it redeclares a previous class field.
SCOPE_ERROR_325 = Function '<arg0>' can not be invoked since it was not declared.
SCOPE_ERROR_326 = Field '<arg0>' can not be initialized using itself.
SCOPE_ERROR_327 = Method '<arg0>' can not be invoked since it was not declared.
SCOPE_ERROR_328 = Local variable '<arg0>' redeclares the type parameter '<arg0>' which is not allowed.
SCOPE_ERROR_329 = Field '<arg0>' can not be accessed since it was not declared in class '<arg1>'.

#  SCOPE SUGGESTIONS
SCOPE_SUGGEST_1300 = To use '<arg0>', it must first be declared as a variable.
SCOPE_SUGGEST_1301 = To inherit from class '<arg0>', the class must first be declared.
SCOPE_SUGGEST_1302 = The parent keyword may only be used inside of a class.
SCOPE_SUGGEST_1303 = The parent keyword can only be used with classes that inherit from other classes. 
SCOPE_SUGGEST_1304 = To use the binary operation '<arg0>', the right-hand side must represent a class name.

#  TYPE ERRORS
TYPE_ERROR_400 = Local variable '<arg0>' was declared with type <arg1>, but '<arg0>' was initialized to a value of type <arg2>.
TYPE_ERROR_401 = Global variable '<arg0>' was declared with type <arg1>, but '<arg0>' was initialized to a value of type <arg2>. 
TYPE_ERROR_402 = Constant variable '<arg0>' was declared with type <arg1>, but '<arg0>' was initialized to a value of type <arg2>. 
TYPE_ERROR_403 = Variable '<arg0>' was declared with type <arg1>, but '<arg0>' was assigned a value of type <arg2>.
TYPE_ERROR_404 = The assignment operation '<arg0>' can not be used with a variable of type <arg1>.
TYPE_ERROR_405 = The binary operation '<arg0>' has a left-hand side type of <arg1> and a right-hand side type of <arg2>.
TYPE_ERROR_406 = The binary operation '<arg0>' evaluates to type <arg1> which is not supported.
TYPE_ERROR_407 = The binary operation '<arg0>' has a left-hand side type of <arg1> which is not supported.
TYPE_ERROR_408 = The unary operation '<arg0>' evaluates to type <arg1> which is not supported.
TYPE_ERROR_409 = The expression above can not be typecasted into an expression of type <arg0>.
TYPE_ERROR_410 = The if statement's conditional expression evaluates to type <arg0>.
TYPE_ERROR_411 = The while loop's conditional expression evaluates to type <arg0>.
TYPE_ERROR_412 = The do while loop's conditional expression evaluates to type <arg0>.
TYPE_ERROR_413 = The for loop's control variable '<arg0>' was declared with type <arg1> which is not supported.
TYPE_ERROR_414 = The for loop's starting value has type <arg0> and the ending value has type <arg1>.
TYPE_ERROR_415 = The for loop's control variable '<arg0>' has type <arg1>, but the iteration expression has type <arg2>.
TYPE_ERROR_416 = The choice statement's value evaluates to type <arg0> which is not supported. 
TYPE_ERROR_417 = The case statement label evaluates to type <arg0>, but the choice statement's value evaluates to type <arg1>.
TYPE_ERROR_418 = A case statement does not support a range of String labels.
TYPE_ERROR_419 = The case statement's labels do not represent a valid range.
TYPE_ERROR_420 = Field variable '<arg0>' was declared with type <arg1>, but '<arg0>' was initialized to a value of type <arg2>.
TYPE_ERROR_421 = The type <arg0> does not represent a valid return type for the function '<arg1>'
TYPE_ERROR_422 = The function '<arg0>' does not return a value of type <arg1>.
TYPE_ERROR_423 = The type <arg0> does not represent a valid return type for the method '<arg1>' declared in class '<arg2>'.
TYPE_ERROR_424 = The method '<arg0>' declared in class '<arg1>' does not return a value of type <arg2>.
TYPE_ERROR_425 = The function '<arg0>' returns a value of type <arg1>, but '<arg0>' has a return type of Void.
TYPE_ERROR_426 = The method '<arg0>' declared in class '<arg1>' returns a value of type <arg2>, but '<arg0>' has a return type of Void.
TYPE_ERROR_427 = The function '<arg0>' returns a value of type <arg1>, but '<arg0>' has a return type of <arg2>.
TYPE_ERROR_428 = The method '<arg0>' declared in class '<arg1>' returns a value of type <arg2>, but '<arg0>' has a return type of <arg3>.
TYPE_ERROR_429 = The function '<arg0>' can not be invoked since there is not a valid overload for '<arg0>' with no arguments.
TYPE_ERROR_430 = The function '<arg0>' can not be invoked since there is not a valid overload for '<arg0>' with the argument type <arg1>.
TYPE_ERROR_431 = The function '<arg0>' can not be invoked since there is not a valid overload for '<arg0>' with the argument types <arg1>.
TYPE_ERROR_432 = The method '<arg0>' declared in class '<arg1>' can not be invoked since there is not a valid overload for '<arg0>' with no arguments.
TYPE_ERROR_433 = The method '<arg0>' declared in class '<arg1>' can not be invoked since there is not a valid overload for '<arg0>' with the argument type <arg2>.
TYPE_ERROR_434 = The method '<arg0>' declared in class '<arg1>' can not be invoked since there is not a valid overload for '<arg0>' with the argument types <arg2>.
TYPE_ERROR_435 = The target '<arg0>' has an invalid type of '<arg1>'.
TYPE_ERROR_436 = The enum '<arg0>' can not represent values with a type of <arg1>.
TYPE_ERROR_437 = The enum '<arg0>' does not have every constant initialized to a value.
TYPE_ERROR_438 = The constant '<arg0>' declared in enum '<arg1>' has type <arg2>, but '<arg1>' represents values of type <arg3>.
TYPE_ERROR_439 = The main function for the program has a return type of <arg0>, but main should have a return type of Void.
TYPE_ERROR_440 = The input expression '<arg0>' has a type of <arg1> which is not supported.
TYPE_ERROR_441 = Variable '<arg0>' has a type <arg1> which is not supported by retype statements.
TYPE_ERROR_442 = Object '<arg0>' can not be retyped into an object of type <arg1>.
TYPE_ERROR_443 = '<arg0>' does not represent a valid type, and it can not be used.
TYPE_ERROR_444 = Class '<arg0>' is not a template, and it can not be instantiated with any type arguments.
TYPE_ERROR_445 = The type corresponding to class '<arg0>' does not have the correct number of type arguments.
TYPE_ERROR_446 = '<arg0>' does not represent a valid type argument for the class '<arg1>'.
TYPE_ERROR_447 = The list has a base type of <arg0>, but a value of type <arg1> was used as an initial value.
TYPE_ERROR_448 = The <arg0> '<arg1>' has <arg2> dimensions, but <arg3> indices were specified.
TYPE_ERROR_449 = The <arg0> list command needs <arg1> arguments, not <arg2>.
TYPE_ERROR_450 = '<arg0>' does not represent a valid List type that can be used by the <arg1> list command.
TYPE_ERROR_451 = '<arg0>' can not be passed as the second argument for the insert list command.
TYPE_ERROR_452 = List '<arg0>' has type <arg1>, but the final argument for the <arg2> list command has type <arg3>.
TYPE_ERROR_453 = '<arg0>' does not represent a valid Array or List type that can be dereferenced.
TYPE_ERROR_454 = The index <arg0> has a type of <arg0> and not a type of Int.
TYPE_ERROR_455 = A 1-dimensional array can not have multiple dimensions specified.
TYPE_ERROR_456 = The value <arg0> is not a valid dimension size for the array.
TYPE_ERROR_457 = Innermost array literal dimension must match the outermost array literal dimension.
TYPE_ERROR_458 = An array of size <arg0> was initialized with <arg1> values.
TYPE_ERROR_459 = A value of type <arg0> was initialized to an Array that stores <arg1> values.
TYPE_ERROR_460 = The size of the multidimensional array is unknown.
TYPE_ERROR_461 = <arg0> is not a valid initial value for the multidimensional array.
TYPE_ERROR_462 = Function '<arg0>' is not a template, and it can not be instantiated with any type arguments.
TYPE_ERROR_463 = The call corresponding to function '<arg0>' does not have the correct number of type arguments.
TYPE_ERROR_464 = '<arg0>' does not represent a valid type argument for the function '<arg1>'.
TYPE_ERROR_465 = '<arg0>' represents a previously declared variable and can not be used as a type.

#TYPE_ERROR_447 = Argument must be an array literal for a multidimensional array.
#TYPE_ERROR_436 = An array literal can only have dimensions with type 'Int' and not type '<arg0>'.
#TYPE_ERROR_443 = A 1D array can not have more than one specified dimensions.
#TYPE_ERROR_444 = The number of array arguments does not match the size of the given array dimension.
#TYPE_ERROR_446 = Innermost array literal dimension must match the outermost array literal dimension.
#TYPE_ERROR_448 = '<arg0>' is an array with <arg1> dimensions, but the array index has <arg2> indices.
#TYPE_ERROR_450 = An array literal can only be assigned to a variable declared as an array.
#TYPE_ERROR_451 = A call to 'length' can only contain one argument.
#TYPE_ERROR_452 = A call to 'length' needs an argument of type array or list.

#  TYPE SUGGESTIONS
TYPE_SUGGEST_1400 = A variable declared with type <arg0> must be initialized to a value of type <arg0>.
TYPE_SUGGEST_1401 = A variable declared with type <arg0> can only be assigned values of type <arg0>.
TYPE_SUGGEST_1402 = The assignment operation '+=' is only supported for variables of type Int, Real, and String.
TYPE_SUGGEST_1403 = The assignment operation '<arg0>' is only supported for variables of type Int and Real.
TYPE_SUGGEST_1404 = The binary operation '<arg0>' must have both the left-hand side and right-hand side be the same type. 
TYPE_SUGGEST_1405 = The binary operation '<arg0>' is only supported for types Int, Char, and Real.
TYPE_SUGGEST_1406 = The binary operation '<arg0>' is only supported for type Int.
TYPE_SUGGEST_1407 = The binary operation '<arg0>' is only supported for types Int, Char, and Bool.
TYPE_SUGGEST_1408 = The binary operation '<arg0>' is only supported for type Bool.
TYPE_SUGGEST_1409 = The binary operation '<arg0>' must have a left-hand side type that represents an object.
TYPE_SUGGEST_1410 = The unary operation '<arg0>' is only supported for types Int, Char, and Bool.
TYPE_SUGGEST_1411 = The unary operation '<arg0>' is only supported for type Bool.
TYPE_SUGGEST_1412 = '<arg0>' evaluates to type Int which means the expression can only be typecasted into a Char or Real.
TYPE_SUGGEST_1413 = '<arg0>' evaluates to type Char which means the expression can only be typecasted into an Int or String.
TYPE_SUGGEST_1414 = '<arg0>' evaluates to type Real which means the expression can only be typecasted into an Int.
TYPE_SUGGEST_1415 = The following typecast is not supported by C Minor.
TYPE_SUGGEST_1416 = The conditional expression for an if statement has to evalaute to type Bool.
TYPE_SUGGEST_1417 = The conditional expression for a while loop has to evaluate to type Bool.
TYPE_SUGGEST_1418 = The conditional expression for a do while loop has to evaluate to type Bool.
TYPE_SUGGEST_1419 = A for loop control variable has to be declared with a type of Int, Char, or a user-defined Enum.
TYPE_SUGGEST_1420 = The for loop's starting and ending values must be the same type.
TYPE_SUGGEST_1421 = The type of the for loop control variable and the iteration expression must be the same.
TYPE_SUGGEST_1422 = A choice statement can only choose from a value of type Int, Char, or String.
TYPE_SUGGEST_1423 = The label for a case statement must match the type of the choice statement's value.
TYPE_SUGGEST_1424 = A case statement can only have a single label representing a String constant.
TYPE_SUGGEST_1425 = The case statement's right label must have a greater value than the left label when specifying a range.
TYPE_SUGGEST_1426 = <arg0> must be defined as a type in order to be used as a return type.
TYPE_SUGGEST_1427 = A function must return a value based on its declared return type.
TYPE_SUGGEST_1428 = A method must return a value based on its declared return type.
TYPE_SUGGEST_1429 = A function with a Void return type can not return any value.
TYPE_SUGGEST_1430 = A method with a Void return type can not return any value.
TYPE_SUGGEST_1431 = The function '<arg0>' must be overloaded as '<arg1>' in order to be invoked.
TYPE_SUGGEST_1432 = The method '<arg0>' declared in class '<arg1>' must be overloaded as '<arg2>' in order to be invoked.
TYPE_SUGGEST_1433 = The target must represent an object previously declared in the program.
TYPE_SUGGEST_1434 = Enums can only represent values of type Int (by default) or Char (if specified by the user).
TYPE_SUGGEST_1435 = All constants in an enum must be initialized to a value if at least one constant was initialized.
TYPE_SUGGEST_1436 = The value initialized to an enum constant must match the type the enum is representing.
TYPE_SUGGEST_1437 = An input statement can only read values representing an Int, Char, Bool, Real, or String.
TYPE_SUGGEST_1438 = A retype statement can only retype variables representing objects.
TYPE_SUGGEST_1439 = Object '<arg0>' can only be retyped to a type found in its class hierarchy.
TYPE_SUGGEST_1440 = To use '<arg0>' as a type, it must be declared as a class first.
TYPE_SUGGEST_1441 = A type representing class '<arg0>' must have only <arg1> type argument.
TYPE_SUGGEST_1442 = A type representing class '<arg0>' must have <arg1> type arguments specified.
TYPE_SUGGEST_1443 = Class '<arg0>' must have a <arg1> type at position <arg2> of the corresponding class type.
TYPE_SUGGEST_1444 = A list with a base type of <arg0> can only have values initialized to type <arg0>.
TYPE_SUGGEST_1445 = The first argument for every list command must be of type List.
TYPE_SUGGEST_1446 = The second argument for an insert list command must be of type Int.
TYPE_SUGGEST_1447 = To use the <arg0> list command on '<arg1>', the final argument must be of type '<arg2>' or '<arg3>'.
TYPE_SUGGEST_1448 = Int constants are required in order to specify the dimensions of an array.
TYPE_SUGGEST_1449 = A call to function '<arg0>' must have only <arg1> type argument.
TYPE_SUGGEST_1450 = A call to function '<arg0>' must have <arg1> type arguments specified.
TYPE_SUGGEST_1451 = Function '<arg0>' must have a <arg1> type at position <arg2> of the corresponding function call.
TYPE_SUGGEST_1452 = A user-defined type can only be reprsented by the declaration of an Enum or Class. 

#  MODIFIER ERRORS
MOD_ERROR_500 = Class '<arg0>' can not inherit from class '<arg1>'.
MOD_ERROR_501 = Concrete class '<arg0>' does not implement all methods declared \
                in the abstract class '<arg1>'
MOD_ERROR_502 = A recursive function call can not be invoked on the function '<arg0>'.
MOD_ERROR_503 = A recursive method call can not be invoked on the method '<arg0>'.
MOD_ERROR_504 = Object '<arg0>' is trying to invoke the non-public method '<arg1>'.
MOD_ERROR_505 = Reassignment is not allowed for the constant variable '<arg0>'.
MOD_ERROR_506 = Object '<arg0>' can not be instantiated from the abstract class '<arg0>'.
MOD_ERROR_507 = Object '<arg0>' is trying to access the non-public field '<arg1>'.
MOD_ERROR_508 = Reassignment is not allowed for the enumerated constant '<arg0>'.

#  MODIFIER SUGGESTIONS
MOD_SUGGEST_1500 = Classes declared with 'final' keyword can not be inherited.
MOD_SUGGEST_1501 = A concrete class must define all methods inherited from an abstract class.
MOD_SUGGEST_1502 = Recursive invocations can only be made on functions that allow recursion.
MOD_SUGGEST_1503 = Recursive invocations can only be made on methods that allow recursion.
MOD_SUGGEST_1504 = Only public methods are accessible outside a class.
MOD_SUGGEST_1505 = Constant variables can only be assigned once during declaration.
MOD_SUGGEST_1506 = Objects may only be instantiated from concrete classes.
MOD_SUGGEST_1507 = Only public fields are accessible outside a class.

#  RUNTIME ERRORS
RUNTIME_ERROR_600 = The number of input arguments does not match the expected number of input values.
RUNTIME_ERROR_601 = Unexpected input given! Input variable has type '<arg0>', but input value does not have the same type.
RUNTIME_ERROR_602 = Array index is trying to access memory not associated with the array.
RUNTIME_ERROR_603 = An array index must start at 1, not 0.
RUNTIME_ERROR_604 = The method '<arg0>' can not be called since the object is of type '<arg1>' and not '<arg2>'
RUNTIME_ERROR_605 = '<arg0>' is a list of size '<arg1>', and '<arg2>' is not a valid insert position.
RUNTIME_ERROR_606 = The field '<arg0>' can not be accessed since the current object type is '<arg1>'.
RUNTIME_ERROR_607 = The object '<arg0>' was not initialized and can not be used.
RUNTIME_ERROR_608 = Invalid removal!!!
RUNTIME_ERROR_609 = <arg0> was not able to be removed from list '<arg1>'.

#  GENERAL SEMANTIC ERRORS
SEMANTIC_ERROR_700 = <arg0> variable '<arg1>' was not initialized to a value.
SEMANTIC_ERROR_701 = A unary operator overload can not have any arguments.
SEMANTIC_ERROR_702 = A binary operator overload must have exactly one argument.
SEMANTIC_ERROR_703 = The file name '<arg0>' can not be imported since it is an invalid file name.
SEMANTIC_ERROR_704 = The file name '<arg0>' can not be imported since it does not exist. 
SEMANTIC_ERROR_705 = The file '<arg0>' is not a valid import since a file can not import itself.
SEMANTIC_ERROR_706 = The file name '<arg0>' has already been imported, and it can not be reimported.
SEMANTIC_ERROR_707 = '<arg0>' can not be used in the left-hand side of an assignment statement.
SEMANTIC_ERROR_708 = '<arg0>' can not be used in the left-hand side of the binary operation '<arg1>'.
SEMANTIC_ERROR_709 = '<arg0>' can not be used in the left-hand side of a retype statement.
SEMANTIC_ERROR_710 = The 'parent' keyword can only be found at the start of a field expression.

#  SEMANTIC SUGGESTIONS
SEMANTIC_SUGGEST_1700 = A variable must be initialized to a default value or marked as `uninit` in order to be used.
SEMANTIC_SUGGEST_1701 = Only '.cm' files are able to be imported.
SEMANTIC_SUGGEST_1702 = The left-hand side of an assignment statement must represent a variable.
SEMANTIC_SUGGEST_1703 = The left-hand side of the binary operation '<arg0>' must represent a variable.
SEMANTIC_SUGGEST_1704 = The left-hand side of a retype statement must represent an object variable.

# WARNINGS
WARNING_1 = The non-local variable '<arg0>' is updated when a call to '<arg1>' is made.

#  GENERAL COMPILER SETTING ERRORS
SETTING_ERROR_1 = The "#phase" debug command was not written correctly. Please try again.
SETTING_ERROR_2 = The given phase number can not be used since it does not represent an integer.
SETTING_ERROR_3 = The given phase number can not be used since it does not correspond to any phase.
