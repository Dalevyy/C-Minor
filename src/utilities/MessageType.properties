

#  SCOPE ERRORS

SCOPE_ERROR_300 = Local variable identifier '<arg0>' has already been declared in this scope.
SCOPE_ERROR_301 = Local variable '<arg0>' can not be initialized to itself.
SCOPE_ERROR_302 = Global variable identifer '<arg0>' has already been declared in this scope.
SCOPE_ERROR_303 = Global variable '<arg0>' can not be initialized to itself.
SCOPE_ERROR_304 = Parameter identifer '<arg0>' has been declared previously.
SCOPE_ERROR_305 = Enum identifier '<arg0>' has already been declared in this scope.
SCOPE_ERROR_306 = Enum constant identifier '<arg0>' has already been declared in this scope.
SCOPE_ERROR_307 = '<arg0>' has not been declared in the current scope.
SCOPE_ERROR_308 = Class '<arg0>' does not exist and can not be instantiated. 
SCOPE_ERROR_309 = Field '<arg0>' was not declared in the class '<arg1>'.
SCOPE_ERROR_310 = Field '<arg0>' was already assigned an initial value.
SCOPE_ERROR_311 = Function identifier '<arg0>' has been declared previously.
SCOPE_ERROR_312 = Function '<arg0>' has already been declared with the given parameter types.
SCOPE_ERROR_313 = Method identifier '<arg0>' has been declared previously.
SCOPE_ERROR_314 = Method '<arg0>' has already been declared with the given parameter types.
SCOPE_ERROR_315 = Field identifier '<arg0>' has already been declared in this scope.
SCOPE_ERROR_316 = Class identifier '<arg0>' has been declared previously.
SCOPE_ERROR_317 = Class '<arg0>' can not inherit itself.
SCOPE_ERROR_318 = Field '<arg0>' was already declared in the base class.
SCOPE_ERROR_319 = Function '<arg0>' has not been declared.
SCOPE_ERROR_320 = Method '<arg0>' has not been declared in the class '<arg1>'.

#  TYPE ERRORS

TYPE_ERROR_400 = Local variable '<arg0>' was declared with type '<arg1>'\
                 \nBut initialization value is of type '<arg2>'.
TYPE_ERROR_401 = Global variable '<arg0>' was declared with type '<arg1>'\
                 \nBut initialization value is of type '<arg2>'.
TYPE_ERROR_402 = Variable '<arg0>' was declared with type '<arg1>'\
                 \nBut assignment value is of type '<arg2>'.
TYPE_ERROR_403 = Assignment operator '<arg0>' can not be used with type '<arg1>'.
TYPE_ERROR_404 = The binary expression has LHS type '<arg0>' and RHS type '<arg1>'.
TYPE_ERROR_405 = The unary expression has type '<arg0>'.
TYPE_ERROR_406 = The if statement's condition evaluates to be '<arg0>', but the condition \
                 must evaluate to be a value of type 'Bool'.
TYPE_ERROR_407 = The loop's condition evaluates to be '<arg0>', but the condition \
                 must evaluate to be a value of type 'Bool'.
TYPE_ERROR_408 = An expression of type 'Int' can only be casted to types 'Char' and 'Real'.
TYPE_ERROR_409 = An expression of type 'Char' can only be casted to types 'Int' and 'String'.
TYPE_ERROR_410 = An expression of type 'Real' can only be casted to type 'Int'.
TYPE_ERROR_411 = A type '<arg0>' expression can not be casted into a type '<arg1>' expression.
TYPE_ERROR_412 = Field '<arg0>' is declared with type '<arg1>' \
                 \nBut passed argument value is of type '<arg2>'.
TYPE_ERROR_413 = Return statement has type '<arg0>', but '<arg1>' should return no value.
TYPE_ERROR_414 = Return statement has type '<arg0>', but '<arg1>' has return type '<arg2>'.
TYPE_ERROR_415 = Field '<arg0>' was declared with type '<arg1>'\
                 \nBut assignment value is of type '<arg2>'.
TYPE_ERROR_416 = Target '<arg0>' has type '<arg1>', but target type should be an 'Object;.
TYPE_ERROR_417 = 'Main' should be declared with a return type of 'Void'.


#  MOD ERRORS
MOD_ERROR_500 = Class '<arg0>' can not inherit from class '<arg1>'.
MOD_ERROR_501 = Concrete class '<arg0>' does not implement all methods declared \
                in the abstract class '<arg1>'
MOD_ERROR_502 = A recursive function call can not be invoked on the function '<arg0>'.
MOD_ERROR_503 = A recursive method call can not be invoked on the method '<arg0>'.
MOD_ERROR_504 = Object '<arg0>' is trying to invoke the non-public method '<arg1>'.
MOD_ERROR_505 = Reassignment is not allowed for the constant variable '<arg0>'.
MOD_ERROR_506 = Object '<arg0>' can not be instantiated from the abstract class '<arg0>'.
MOD_ERROR_507 = Object '<arg0>' is trying to access the non-public field '<arg1>'.

# SCOPE SUGGESTIONS

SCOPE_SUGGEST_1300 = 'arg<0>' declared below.
SCOPE_SUGGEST_1301 = Redeclaration of 'arg<0>' in the same scope is not allowed.

# TYPE SUGGESTIONS
TYPE_SUGGEST_1400 = Both types must be the same when using the binary operation '<arg0>'.
TYPE_SUGGEST_1401 = Only numeric types are allowed when using the relational operator '<arg0>'. \
                    \nThe numeric types are 'Int', 'Real', and 'Char'.
TYPE_SUGGEST_1402 = Only numeric types are allowed when using the arithmetic operator '<arg0>'. \
                    \nThe numeric types are 'Int', 'Real', and 'Char'.
TYPE_SUGGEST_1403 = Both types must be 'Int' to use the bitwise shift operator '<arg0>'.
TYPE_SUGGEST_1404 = Both types must be 'Discrete' to use the bitwise operator '<arg0>'. \
                    \nDiscrete types include 'Int', 'Char', and 'Bool'.
TYPE_SUGGEST_1405 = Both types must be 'Bool' to use the logical operator '<arg0>'.
TYPE_SUGGEST_1406 = Both types must be an 'Object' to use object operator '<arg0>'.
TYPE_SUGGEST_1407 = The unary operator '<arg0>' only supports values of type 'Int' and 'Real'.
TYPE_SUGGEST_1408 = The unary operator '<arg0>' only supports values of type 'Bool'.

# MOD SUGGESTIONS
MOD_SUGGEST_1500 = Classes declared with 'final' keyword can not be inherited.
MOD_SUGGEST_1501 = A concrete class must define all methods inherited from an abstract class.
MOD_SUGGEST_1502 = Recursive invocations can only be made on functions that allow recursion.
MOD_SUGGEST_1503 = Recursive invocations can only be made on methods that allow recursion.
MOD_SUGGEST_1504 = Only public methods are accessible outside a class.
MOD_SUGGEST_1505 = Constant variables can only be assigned once during declaration.
MOD_SUGGEST_1506 = Objects may only be instantiated from concrete classes.
MOD_SUGGEST_1507 = Only public fields are accessible outside a class.
