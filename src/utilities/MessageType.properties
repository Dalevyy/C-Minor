

#  SCOPE ERRORS

SCOPE_ERROR_300 = Local variable identifier '<arg0>' has already been declared in this scope.
SCOPE_ERROR_301 = Local variable '<arg0>' can not be initialized to itself.
SCOPE_ERROR_302 = Global variable identifier '<arg0>' has already been declared in this scope.
SCOPE_ERROR_303 = Global variable '<arg0>' can not be initialized to itself.
SCOPE_ERROR_304 = Parameter identifier '<arg0>' has been declared previously.
SCOPE_ERROR_305 = Enum identifier '<arg0>' has already been declared in this scope.
SCOPE_ERROR_306 = Enum constant identifier '<arg0>' has already been declared in this scope.
SCOPE_ERROR_307 = '<arg0>' has not been declared in the current scope.
SCOPE_ERROR_308 = Class '<arg0>' does not exist and can not be instantiated. 
SCOPE_ERROR_309 = Field '<arg0>' was not declared in class '<arg1>'.
SCOPE_ERROR_310 = Field '<arg0>' was already assigned an initial value.
SCOPE_ERROR_311 = Function identifier '<arg0>' has been declared previously.
SCOPE_ERROR_312 = Function '<arg0>' has already been declared with the given parameter types.
SCOPE_ERROR_313 = Method identifier '<arg0>' has been declared previously.
SCOPE_ERROR_314 = Method '<arg0>' has already been declared with the given parameter types.
SCOPE_ERROR_315 = Field identifier '<arg0>' has already been declared in this scope.
SCOPE_ERROR_316 = Class identifier '<arg0>' has been declared previously.
SCOPE_ERROR_317 = Class '<arg0>' can not inherit itself.
SCOPE_ERROR_318 = Field '<arg0>' was already declared in the base class.
SCOPE_ERROR_319 = Function '<arg0>' can not be invoked since it has not been declared.
SCOPE_ERROR_320 = Object '<arg0>' was not declared anywhere in the program.
SCOPE_ERROR_321 = Method '<arg0>' can not be invoked since it has not been declared.
SCOPE_ERROR_322 = Class '<arg0>' does not exist, so it can not be inherited.
SCOPE_ERROR_323 = A 'break' statement can only be written inside a loop.
SCOPE_ERROR_324 = A 'continue' statement can only be written inside a loop.
SCOPE_ERROR_325 = '<arg0>' is not a valid name for an assignment statement.
SCOPE_ERROR_326 = '<arg0>' represents a type, and it can not be used as a name expression.
SCOPE_ERROR_327 = An input statement can only contain name expressions.
SCOPE_ERROR_328 = Class '<arg0>' was not declared anywhere in the program.
SCOPE_ERROR_329 = '<arg0>' does not represent a valid class name.
SCOPE_ERROR_330 = Invalid field expression written.
SCOPE_ERROR_331 = Field '<arg0>' can not be initialized to itself.
SCOPE_ERROR_332 = The LHS of a retype statement has to be a name, field, or array expression.


#  TYPE ERRORS

TYPE_ERROR_400 = Local variable '<arg0>' was declared with type '<arg1>'\
                 \nBut initialization value is of type '<arg2>'.
TYPE_ERROR_401 = Global variable '<arg0>' was declared with type '<arg1>'\
                 \nBut initialization value is of type '<arg2>'.
TYPE_ERROR_402 = Variable '<arg0>' was declared with type '<arg1>'\
                 \nBut assignment value is of type '<arg2>'.
TYPE_ERROR_403 = Assignment operator '<arg0>' can not be used with type '<arg1>'.
TYPE_ERROR_404 = The binary expression has LHS type '<arg0>' and RHS type '<arg1>'.
TYPE_ERROR_405 = The unary expression has type '<arg0>'.
TYPE_ERROR_406 = The if statement's condition evaluates to be '<arg0>', but the condition \
                 must evaluate to be a value of type 'Bool'.
TYPE_ERROR_407 = The loop control variable must be of type 'Int', 'Char', or 'Enum'.
TYPE_ERROR_408 = An expression of type 'Int' can only be casted to types 'Char' and 'Real'.
TYPE_ERROR_409 = An expression of type 'Char' can only be casted to types 'Int' and 'String'.
TYPE_ERROR_410 = An expression of type 'Real' can only be casted to type 'Int'.
TYPE_ERROR_411 = A type '<arg0>' expression can not be casted into a type '<arg1>' expression.
TYPE_ERROR_412 = Field '<arg0>' is declared with type '<arg1>' \
                 \nBut passed argument value is of type '<arg2>'.
TYPE_ERROR_413 = Return statement has type '<arg0>', but '<arg1>' should return no value.
TYPE_ERROR_414 = Return statement has type '<arg0>', but '<arg1>' has return type '<arg2>'.
TYPE_ERROR_415 = Field '<arg0>' was declared with type '<arg1>'\
                 \nBut assignment value is of type '<arg2>'.
TYPE_ERROR_416 = Target '<arg0>' has type '<arg1>', but target type should be an 'Object;.
TYPE_ERROR_417 = 'Main' should be declared with a return type of 'Void'.
TYPE_ERROR_418 = '<arg0>' is not a valid return type for the function '<arg1>'.
TYPE_ERROR_419 = Function '<arg0>' does not return any value of type '<arg1>'.
TYPE_ERROR_420 = '<arg0>' is not a valid return type for the method '<arg1>'.
TYPE_ERROR_421 = Method '<arg0>' does not return any value of type '<arg1>'.
TYPE_ERROR_422 = '<arg0>' is not a valid type for the parameter '<arg1>'.
TYPE_ERROR_423 = The enumeration '<arg0>' can not have values of type '<arg1>'.
TYPE_ERROR_424 = The value given to '<arg0>' has type '<arg1>', but the enumeration has type '<arg2>'.
TYPE_ERROR_425 = Every constant in an enumeration must be initialized if at least one constant is initialized.
TYPE_ERROR_426 = Choice statement was given a value of type '<arg0>'.
TYPE_ERROR_427 = Case statement label has type '<arg0>', but choice statement has type '<arg1>'.
TYPE_ERROR_428 = Function '<arg0>' can not be invoked since there isn't a valid overload.
TYPE_ERROR_429 = Method '<arg0>' can not be invoked since there isn't a valid overload.
TYPE_ERROR_430 = Array index expression is of type '<arg0>', but it must have type 'Int'.
TYPE_ERROR_431 = The enumeration '<arg0>' has no valid ordering that the compiler can generate.
TYPE_ERROR_432 = A choice statement with a String value can only have a single label constant for cases.
TYPE_ERROR_433 = The right constant of a case label must be greater in value than the left constant of the same case label.
TYPE_ERROR_434 = '<arg0>' does not represent a valid array type and can not be dereferenced.
TYPE_ERROR_435 = The dimensions for an array literal must be specified with a constant 'Int' value.
TYPE_ERROR_436 = An array literal can only have dimensions with type 'Int' and not type '<arg0>'.
TYPE_ERROR_437 = The LHS of the for loop condition must be an 'Int', 'Char', or 'Enum' literal value.
TYPE_ERROR_438 = The LHS and RHS of the for loop condition have different types, but they must be the same type.
TYPE_ERROR_439 = The RHS of the for loop condition must be an 'Int', 'Char', or 'Enum' literal value.
TYPE_ERROR_440 = The for loop control variable and loop condition literals have different types, but they must be the same type.
TYPE_ERROR_441 = THE LHS of the for loop condition should be smaller than the RHS of the for loop condition.
TYPE_ERROR_442 = The size of an n-Dimensional array must be specified.
TYPE_ERROR_443 = A 1D array can not have more than one specified dimensions.
TYPE_ERROR_444 = The number of array arguments does not match the size of the given array dimension.
TYPE_ERROR_445 = The array has a base type of '<arg0>', but a value of type '<arg1>' was given as an initial value.
TYPE_ERROR_446 = Innermost array literal dimension must match the outermost array literal dimension.
TYPE_ERROR_447 = Argument must be an array literal for a multidimensional array.
TYPE_ERROR_448 = '<arg0>' is an array with <arg1> dimensions, but the array index has <arg2> indices.
TYPE_ERROR_449 = An input statement can only contain Discrete and Scalar types.
TYPE_ERROR_450 = An array literal can only be assigned to a variable declared as an array.
TYPE_ERROR_451 = A call to 'length' can only contain one argument.
TYPE_ERROR_452 = A call to 'length' needs an argument of type array or list.
TYPE_ERROR_453 = A retype statement can only work with objects and not variables of type '<arg0>'.
TYPE_ERROR_454 = Object '<arg0>' can not be retyped into a '<arg1>' type.
TYPE_ERROR_455 = Argument must be a list literal for a multidimensional list.
TYPE_ERROR_456 = The list has a base type of '<arg0>', but a value of type '<arg1>' was given as an initial value.
TYPE_ERROR_457 = Function '<arg0>' only takes in <arg1> arguments, but <arg2> arguments were given.
TYPE_ERROR_458 = The first argument for function '<arg0>' must be a variable name of type `List`.
TYPE_ERROR_459 = The second argument for function '<arg0>' must match the base type of the list.
TYPE_ERROR_460 = The second argument for function 'insert' must be an 'Int' position.
TYPE_ERROR_461 = The third argument for function 'insert' must match the base type of the list.

#  MOD ERRORS
MOD_ERROR_500 = Class '<arg0>' can not inherit from class '<arg1>'.
MOD_ERROR_501 = Concrete class '<arg0>' does not implement all methods declared \
                in the abstract class '<arg1>'
MOD_ERROR_502 = A recursive function call can not be invoked on the function '<arg0>'.
MOD_ERROR_503 = A recursive method call can not be invoked on the method '<arg0>'.
MOD_ERROR_504 = Object '<arg0>' is trying to invoke the non-public method '<arg1>'.
MOD_ERROR_505 = Reassignment is not allowed for the constant variable '<arg0>'.
MOD_ERROR_506 = Object '<arg0>' can not be instantiated from the abstract class '<arg0>'.
MOD_ERROR_507 = Object '<arg0>' is trying to access the non-public field '<arg1>'.
MOD_ERROR_508 = Reassignment is not allowed for the enumerated constant '<arg0>'.

# RUNTIME ERRORS
RUNTIME_ERROR_600 = The number of input arguments does not match the expected number of input values.
RUNTIME_ERROR_601 = Unexpected input given! Input variable has type '<arg0>', but input value does not have the same type.
RUNTIME_ERROR_602 = Array index is trying to access memory not associated with the array.
RUNTIME_ERROR_603 = An array index must start at 1, not 0.
RUNTIME_ERROR_604 = The method '<arg0>' can not be called since the object is of type '<arg1>' and not '<arg2>'
RUNTIME_ERROR_605 = '<arg0>' is a list of size '<arg1>', and '<arg2>' is not a valid insert position.

# SCOPE SUGGESTIONS

SCOPE_SUGGEST_1300 = 'arg<0>' declared below.
SCOPE_SUGGEST_1301 = Redeclaration of 'arg<0>' in the same scope is not allowed.
SCOPE_SUGGEST_1302 = Only previously declared variables or field expressions are allowed for assignments.

# TYPE SUGGESTIONS
TYPE_SUGGEST_1400 = Both types must be the same when using the binary operation '<arg0>'.
TYPE_SUGGEST_1401 = Only numeric types are allowed when using the relational operator '<arg0>'. \
                    \nThe numeric types are 'Int', 'Real', and 'Char'.
TYPE_SUGGEST_1402 = Only numeric types are allowed when using the arithmetic operator '<arg0>'. \
                    \nThe numeric types are 'Int', 'Real', and 'Char'.
TYPE_SUGGEST_1403 = Both types must be 'Int' to use the bitwise shift operator '<arg0>'.
TYPE_SUGGEST_1404 = Both types must be 'Discrete' to use the bitwise operator '<arg0>'. \
                    \nDiscrete types include 'Int', 'Char', and 'Bool'.
TYPE_SUGGEST_1405 = Both types must be 'Bool' to use the logical operator '<arg0>'.
TYPE_SUGGEST_1406 = The LHS must represent an 'Object' to use object operator '<arg0>'.
TYPE_SUGGEST_1407 = The unary operator '<arg0>' only supports values of type 'Int' and 'Char'.
TYPE_SUGGEST_1408 = The unary operator '<arg0>' only supports values of type 'Bool'.
TYPE_SUGGEST_1409 = Choice statements can only choose values of type 'Int', 'Char', and 'String'.
TYPE_SUGGEST_1410 = The type of every case statement label must match the type of the choice statement.
TYPE_SUGGEST_1411 = An enumeration will store values of type `Int` by default or type 'Char' if specified.

# MOD SUGGESTIONS
MOD_SUGGEST_1500 = Classes declared with 'final' keyword can not be inherited.
MOD_SUGGEST_1501 = A concrete class must define all methods inherited from an abstract class.
MOD_SUGGEST_1502 = Recursive invocations can only be made on functions that allow recursion.
MOD_SUGGEST_1503 = Recursive invocations can only be made on methods that allow recursion.
MOD_SUGGEST_1504 = Only public methods are accessible outside a class.
MOD_SUGGEST_1505 = Constant variables can only be assigned once during declaration.
MOD_SUGGEST_1506 = Objects may only be instantiated from concrete classes.
MOD_SUGGEST_1507 = Only public fields are accessible outside a class.
