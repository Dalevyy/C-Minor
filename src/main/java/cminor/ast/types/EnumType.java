package cminor.ast.types;

import cminor.ast.AST;
import cminor.ast.misc.Name;
import cminor.utilities.Visitor;

/**
 * A {@link DiscreteType} representing an enumeration.
 * <p>
 *     The final primitive type is a user-defined enumeration. This enumeration
 *     will only allow constants of type {@code Int} and {@code Char}. This type
 *     is not generated by the parser since the parser will not know if a custom
 *     type represents a class or an enum, so we will need to create this type
 *     ourselves with the {@link cminor.micropasses.TypeValidator}.
 * </p>
 * @author Daniel Levy
 */
public class EnumType extends DiscreteType {

    /**
     * The {@link Name} given to the {@link cminor.ast.topleveldecls.EnumDecl}.
     */
    private Name name;

    /**
     * Default constructor for {@link EnumType}.
     */
    public EnumType() { super(); }

    /**
     * {@inheritDoc}
     */
    public boolean isEnum() { return true; }

    /**
     * {@inheritDoc}
     */
    public EnumType asEnum() { return this; }

    /**
     * {@inheritDoc}
     */
    public String getTypeName() { return name.toString(); }

    /**
     * {@inheritDoc}
     */
    @Override
    public AST deepCopy() {
        return new EnumTypeBuilder()
                   .setMetaData(this)
                   .setName(name.deepCopy().asSubNode().asName())
                   .create();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void visit(Visitor v) { v.visitEnumType(this); }

    /**
     * Internal class that builds an {@link EnumType} object.
     */
    public static class EnumTypeBuilder extends NodeBuilder {

        /**
         * {@link EnumType} object we are building.
         */
        private final EnumType et = new EnumType();

        /**
         * @see cminor.ast.AST.NodeBuilder#setMetaData(AST, AST)
         * @return Current instance of {@link EnumTypeBuilder}.
         */
        public EnumTypeBuilder setMetaData(AST node) {
            super.setMetaData(et,node);
            return this;
        }

        /**
         * Sets the enum type's {@link #name}.
         * @param name The {@link Name} representing the original enum's name.
         * @return Current instance of {@link EnumTypeBuilder}.
         */
        public EnumTypeBuilder setName(Name name) {
            et.name = name;
            return this;
        }

        /**
         * Creates an {@link EnumType} object.
         * @return {@link EnumType}
         */
        public EnumType create() { return et; }
    }
}
