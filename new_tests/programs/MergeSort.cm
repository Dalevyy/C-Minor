
class Vector<itemType> {

    public a:List[itemType]

    protected method inBound(inout pos:Int) => Bool {
        if(pos < 0 or pos > length(a)) {
            cout << 'Error! The current vector has a size of '
                 << length(a)
                 << ', so the position '
                 << pos
                 << ' can not be used.'
            return False
        }

        return True
    }

    public method add(in item:itemType) => Void { append(a,item) }

    public method add(in pos:Int, in item:itemType) => Void {
        if(not inBound(pos)) { stop }
        insert(a,pos,item)
    }

    public pure method remove(inout pos:Int) => Void {
        if(not inBound(pos)) { stop }
        remove(a,pos)
        set pos += 1 // Demonstration
    }

    // Merge Operation
    public operator+(ref RHS:Vector<itemType>) => List[itemType] {
        def mergedVector:List[itemType] = List()

        for(def i:Int in 1 .. length(a)) { append(mergedVector, a[i]) }
        for(def i:Int in 1 .. length(RHS.a)) { append(mergedVector, RHS.a[i]) }

        return mergedVector
    }

    public pure method print() => Void {
        cout << '['
        for(def i:Int in 1 ..< length(a)) { cout << a[i] << ', ' }
        cout << a[length(a)] << ']' << endl
    }

    public method getLst() => Vector<itemType> { return a }
}

def main() => Void {
    def lst1:Vector<Int> = new Vector<Int>(a=List())    // List[1,4,2,3]
    def lst2:Vector<Int> = new Vector<Int>(a=List())    // List[6,7,5,8]
    def lst3:List[Int] = uninit

    lst1.add(1)
    lst1.add(2)
    lst1.add(3)
    //lst1.add(2,4)

    lst2.add(6)
    lst2.add(7)
    lst2.add(8)
    //lst2.add(3,5)

    set lst3 = lst1 + lst2

    lst1.print()
    lst2.print()
    lst3.print()
}
