/*
    Operator Overloading Test #3

    This tests if a unary operator overload 
    will work on a multityped object.
    can work on a subtype object.

    Output:
        Value of x = true 
        Value of x = false 
*/

class A {
    protected x:Bool

    public operator not() => Void {
        set x = not x 
    }

    public method print() => Void {
        cout << 'Value of x = ' << x << endl 
    }
}

class B inherits A { }

def a:A = uninit
if(6 < 5) {
    retype a = new A(x=False)
} else {
    retype a = new B(x=True)
}

a.print()
not a 
a.print()
